// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeCare.Infrastructure;

#nullable disable

namespace WeCare.Infrastructure.Migrations
{
    [DbContext(typeof(WeCareDatabaseContext))]
    [Migration("20230301021325_AddVolunteerOpportunityAndOpportunityCause")]
    partial class AddVolunteerOpportunityAndOpportunityCause
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpportunityCauseVolunteerOpportunity", b =>
                {
                    b.Property<int>("CausesId")
                        .HasColumnType("integer")
                        .HasColumnName("causes_id");

                    b.Property<long>("VolunteerOpportunitiesId")
                        .HasColumnType("bigint")
                        .HasColumnName("volunteer_opportunities_id");

                    b.HasKey("CausesId", "VolunteerOpportunitiesId")
                        .HasName("pk_opportunity_cause_volunteer_opportunity");

                    b.HasIndex("VolunteerOpportunitiesId")
                        .HasDatabaseName("ix_opportunity_cause_volunteer_opportunity_volunteer_opportuni");

                    b.ToTable("opportunity_cause_volunteer_opportunity", "public");
                });

            modelBuilder.Entity("WeCare.Domain.Models.ConfirmationToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_confirmation_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_confirmation_tokens_user_id");

                    b.ToTable("confirmation_tokens", "public");
                });

            modelBuilder.Entity("WeCare.Domain.Models.OpportunityCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_opportunity_causes");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_opportunity_causes_name");

                    b.ToTable("opportunity_causes", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "POLITICS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CITIZEN_PARTICIPATION"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FIGHT_AGAINST_HUNGER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FIGHT_AGAINST_POVERTY"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CONSCIOUS_CONSUMPTION"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CHILDREN_AND_YOUTH"
                        },
                        new
                        {
                            Id = 7,
                            Name = "CULTURE_SPORTS_AND_ART"
                        },
                        new
                        {
                            Id = 8,
                            Name = "COMMUNITY_DEVELOPMENT"
                        },
                        new
                        {
                            Id = 9,
                            Name = "EDUCATION"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RACIAL_EQUITY"
                        },
                        new
                        {
                            Id = 11,
                            Name = "SPORTS"
                        },
                        new
                        {
                            Id = 12,
                            Name = "ELDERLY"
                        },
                        new
                        {
                            Id = 13,
                            Name = "YOUTH"
                        },
                        new
                        {
                            Id = 14,
                            Name = "LGBTI"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ENVIRONMENT"
                        },
                        new
                        {
                            Id = 16,
                            Name = "URBAN_MOBILITY"
                        },
                        new
                        {
                            Id = 17,
                            Name = "WOMEN"
                        },
                        new
                        {
                            Id = 18,
                            Name = "DISABLED_PEOPLE"
                        },
                        new
                        {
                            Id = 19,
                            Name = "HOMELESS_POPULATION"
                        },
                        new
                        {
                            Id = 20,
                            Name = "INDIGENOUS_PEOPLE"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ANIMAL_PROTECTION"
                        },
                        new
                        {
                            Id = 22,
                            Name = "REFUGEES"
                        },
                        new
                        {
                            Id = 23,
                            Name = "HEALTH"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SUSTAINABILITY"
                        },
                        new
                        {
                            Id = 25,
                            Name = "PROFESSIONAL_TRAINING"
                        });
                });

            modelBuilder.Entity("WeCare.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telephone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "public");

                    b.HasDiscriminator<string>("Type").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WeCare.Domain.Models.VolunteerOpportunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("InstitutionId")
                        .HasColumnType("bigint")
                        .HasColumnName("institution_id");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<DateTime>("OpportunityDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("opportunity_date");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_volunteer_opportunities");

                    b.HasIndex("InstitutionId")
                        .HasDatabaseName("ix_volunteer_opportunities_institution_id");

                    b.ToTable("volunteer_opportunities", "public");
                });

            modelBuilder.Entity("WeCare.Domain.Models.Candidate", b =>
                {
                    b.HasBaseType("WeCare.Domain.Models.User");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cpf");

                    b.HasDiscriminator().HasValue("CANDIDATE");
                });

            modelBuilder.Entity("WeCare.Domain.Models.Institution", b =>
                {
                    b.HasBaseType("WeCare.Domain.Models.User");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.HasDiscriminator().HasValue("INSTITUTION");
                });

            modelBuilder.Entity("OpportunityCauseVolunteerOpportunity", b =>
                {
                    b.HasOne("WeCare.Domain.Models.OpportunityCause", null)
                        .WithMany()
                        .HasForeignKey("CausesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_opportunity_cause_volunteer_opportunity_opportunity_cause_c");

                    b.HasOne("WeCare.Domain.Models.VolunteerOpportunity", null)
                        .WithMany()
                        .HasForeignKey("VolunteerOpportunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_opportunity_cause_volunteer_opportunity_volunteer_opportuni");
                });

            modelBuilder.Entity("WeCare.Domain.Models.ConfirmationToken", b =>
                {
                    b.HasOne("WeCare.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_confirmation_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeCare.Domain.Models.VolunteerOpportunity", b =>
                {
                    b.HasOne("WeCare.Domain.Models.Institution", "Institution")
                        .WithMany("VolunteerOpportunities")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_volunteer_opportunities_users_institution_id");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("WeCare.Domain.Models.Institution", b =>
                {
                    b.Navigation("VolunteerOpportunities");
                });
#pragma warning restore 612, 618
        }
    }
}
